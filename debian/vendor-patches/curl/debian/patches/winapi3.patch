--- a/Cargo.toml	1970-01-01 00:00:00.000000000 +0000
+++ b/Cargo.toml	2018-09-21 18:54:24.693880364 +0000
@@ -48,4 +48,2 @@ version = "0.1.2"
 version = "0.9.33"
-[target."cfg(target_env=\"msvc\")".dependencies.kernel32-sys]
-version = "0.2.2"
 
@@ -54,3 +52,4 @@ version = "0.1.13"
 [target."cfg(windows)".dependencies.winapi]
-version = "0.2.7"
+version = "0.3"
+features = ["winsock2", "wincrypt", "libloaderapi"]
 [badges.appveyor]
--- a/src/easy/windows.rs	2018-09-21 18:01:35.962553903 +0000
+++ b/src/easy/windows.rs	2018-09-21 18:01:35.962553903 +0000
@@ -4,21 +4,21 @@ use libc::c_void;
 
 #[cfg(target_env = "msvc")]
 mod win {
-    use kernel32;
     use std::ffi::CString;
     use std::mem;
     use std::ptr;
     use schannel::cert_context::ValidUses;
     use schannel::cert_store::CertStore;
     use winapi::{self, c_void, c_uchar, c_long, c_int};
+    use winapi::um::libloaderapi::{GetModuleHandleW, GetProcAddress};
 
     fn lookup(module: &str, symbol: &str) -> Option<*const c_void> {
         unsafe {
             let symbol = CString::new(symbol).unwrap();
             let mut mod_buf: Vec<u16> = module.encode_utf16().collect();
             mod_buf.push(0);
-            let handle = kernel32::GetModuleHandleW(mod_buf.as_mut_ptr());
-            let n = kernel32::GetProcAddress(handle, symbol.as_ptr());
+            let handle = GetModuleHandleW(mod_buf.as_mut_ptr());
+            let n = GetProcAddress(handle, symbol.as_ptr());
             if n == ptr::null() {
                 None
             } else {
--- a/src/lib.rs	2018-09-21 18:01:35.962553903 +0000
+++ b/src/lib.rs	2018-09-21 18:01:35.962553903 +0000
@@ -61,8 +61,6 @@ extern crate openssl_probe;
 #[cfg(windows)]
 extern crate winapi;
 
-#[cfg(target_env = "msvc")]
-extern crate kernel32;
 #[cfg(target_env = "msvc")]
 extern crate schannel;
 
--- a/src/multi.rs	2018-09-21 18:01:35.962553903 +0000
+++ b/src/multi.rs	2018-09-21 18:01:35.962553903 +0000
@@ -8,7 +8,7 @@ use libc::{c_int, c_char, c_void, c_long, c_short};
 use curl_sys;
 
 #[cfg(windows)]
-use winapi::winsock2::fd_set;
+use winapi::um::winsock2::fd_set;
 #[cfg(unix)]
 use libc::{fd_set, pollfd, POLLIN, POLLPRI, POLLOUT};
 
